#!/usr/bin/env python
"""Helper to download and install Drush in a project's environment."""

import os
import subprocess


class DrushInstaller(object):
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.tmp_dir = os.path.join(self.base_dir, 'var', 'tmp')
        self.bin_dir = os.path.join(self.base_dir, 'bin')
        self.lib_dir = os.path.join(self.base_dir, 'lib')
        self.www_dir = os.path.join(self.base_dir, 'www')
        self.drush_url = 'http://ftp.drupal.org/files/projects/drush-7.x-4.4.tar.gz'
        self.drush_dir = os.path.join(self.lib_dir, 'drush')
        self.drush_local_commands = os.path.join(self.lib_dir, 'drush_commands')
        self.drush_commands_paths = [self.drush_local_commands]
        self.drush_commands = {
            'drush_make': 'http://ftp.drupal.org/files/projects/drush_make-6.x-2.2.tar.gz'
        }
        self.drush_wrapper = os.path.join(self.bin_dir, 'drush')
    
    def __call__(self):
        """Main command callback."""
        previous_working_dir = os.getcwd()  # Remember previous working dir
        os.chdir(self.base_dir)  # cd to the deployment base dir
        self.install_drush()
        self.install_drush_commands()
        self.generate_drush_wrapper()
        os.chdir(previous_working_dir)  # Restore previous working dir

    def mkdir(self, path):
        """Create a directory."""
        if not os.path.exists(path):
            os.makedirs(path)
        elif not os.path.isdir(path):
            raise Exception('%s is not a directory' % path)
    
    def install_drush(self):
        """Download and install drush."""
        print "Installing drush in %s" % self.drush_dir
        self.mkdir(self.tmp_dir)
        self.mkdir(self.lib_dir)
        tmp_archive = os.path.join(self.tmp_dir, 'drush.tar.gz')
        subprocess.call(["wget",
                         self.drush_url,
                         "-O",
                         tmp_archive])
        subprocess.call(['tar',
                         '-xzf',
                         tmp_archive,
                         '-C',
                         self.lib_dir])
        os.remove(tmp_archive)
        print 'Done'

    def install_drush_commands(self):
        self.mkdir(self.drush_local_commands)
        for command, url in self.drush_commands.items():
            self.install_drush_command(command, url)
    
    def install_drush_command(self, command, url):
        """Download and install a drush command."""
        local_command_dir = os.path.join(self.drush_local_commands, command)
        print "Installing %s in %s" % (command, local_command_dir)
        self.mkdir(self.tmp_dir)
        tmp_archive = os.path.join(self.tmp_dir, '%s.tar.gz' % command)
        subprocess.call(["wget",
                         url,
                         "-O",
                         tmp_archive])
        subprocess.call(['tar',
                         '-xzf',
                         tmp_archive,
                         '-C',
                         self.drush_local_commands])
        os.remove(tmp_archive)
        print 'Done'
        
    def generate_drush_wrapper(self):
        """Generate drush wrapper."""
        print 'Generating bin/drush command'
        script_content = """#!/usr/bin/env sh

# A drush wrapper for local project environment.
# Contents of this file has been generated by bootstrap script.

# Configuration
DRUSH_CMD="%(drush_cmd)s"
WWW_DIR="%(www_dir)s"
COMMAND_DIRS="%(command_dirs)s"

# Drush wrapper
$DRUSH_CMD --include=$COMMAND_DIRS --root=$WWW_DIR $@""" % {
            'drush_cmd': os.path.join(self.drush_dir, 'drush'),
            'www_dir': self.www_dir,
            'command_dirs': ':'.join(self.drush_commands_paths),  # WARNING: the ":" separator may fail on Windows
        }

        with open(self.drush_wrapper, 'w') as f:
            f.write(script_content)
        os.chmod(self.drush_wrapper, 0755)
        print 'Done'


if __name__ == "__main__":
    installer = DrushInstaller()
    installer()
